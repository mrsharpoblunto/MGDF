/**

@page Guidelines

@par Guidelines and Tips

-# Create one test file per class to be tested.  They will be easier to find if
   you name them with the same name as the class, + "Test".  For example, the
   tests for MyClass would be in MyClassTest.cpp.
-# Use unnamed namespaces for local variables and functions within a test file.
-# Build your test DLL with /EHsc.  (It is not necessary that any production LIBs
   you link in are built with an /EH switch.)
-# The ASSERT* macros throw exceptions.  Take advantage of C++ automatic storage 
   behavior (destructors get called when objects go out of scope) to ensure cleanup 
   is done even if an exception gets thrown.  NOTE: Do NOT call WIN_ASSERT_* macros
   or throw exceptions in destructors.  See C++ FAQs online for why this is
   bad.
-# Use the WIN_ASSERT* macros liberally in test code and helper classes/functions.
-# Create "Inspectable" or "Testable" classes derived from production code classes 
   so you can have access to protected members from tests.
-# Create "Mock" classes that implement production code interfaces (or abstract
   classes) to isolate your code for testing.
-# Use fixture SETUP and TEARDOWN to ensure that cleanup is done after tests
   are run, especially if the same cleanup is required for multiple tests.
-# Name your tests in such a way that tests you may want to run together begin
   with the same word or words.  A good idea is to name the test starting with 
   the name of the class followed by the name of the function being tested.  This 
   way you can run all the tests for the class or all the tests for just one
   method, using the -p option.
-# If you want the -n option to do a good job of preventing error dialogs, use
   the same CRT as WinUnit.exe does, for any executables that will be part of the 
   process.  WinUnit.exe uses /MDd for Debug builds and /MD for Release builds,
   so those should be used for the builds of your executables you're running
   against.
-# Use Ctrl+Spacebar in Visual Studio for Intellisense when writing a test--the 
   WIN_* macros will be grouped together.
-# WIN_ASSERT* macros output a file and line number when they fail.  If they 
   are directed to the Output window in Visual Studio, you can double-click
   on them to take you to the location where they occurred. To ensure the full
   paths to the source files are displayed, turn on the /FC compiler option for
   your test project.  You can get to it via project Properties,
   Configuration Properties / C/C++ / Advanced, and set Use Full Paths to Yes.
   
@par Notes on Potentially Unexpected Behavior

 -# The WIN_TRACE macro calls OutputDebugString, whose output *from the test
    executable only* is redirected to the tool's loggers (i.e. it will show
    up in stdout by default).  Any other calls to OutputDebugString in other
    DLLs are NOT redirected.
 -# WIN_ASSERT_EQUAL and WIN_ASSERT_NOT_EQUAL treat numeric literals (e.g. the 
    number 5) as signed integers, so if you're comparing them to an unsigned type 
    you'll get a signed/unsigned mismatch warning (compiling with /W4).  The solution 
    is to append a 'U' to the number to indicate it should be treated as unsigned.
    Example: 
       DWORD d = 5;
       WIN_ASSERT_EQUAL(5U, d);
*/
