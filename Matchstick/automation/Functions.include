<project name="Functions" basedir="..\" xmlns="http://nant.sf.net/release/0.86-beta1/nant.xsd">

  <property name="date.now" value="${ datetime::now() }"/>
  <property name="year.now" value="${ datetime::get-year( date.now ) }"/>
  <property name="year.since2007" value="${ datetime::get-year( date.now ) - 2007}"/>
  <property name="month.now" value="${ datetime::get-month( date.now )}"/>
  <property name="month.now" value="0${ month.now }" if="${ int::parse( month.now ) &lt; 10 }"/>
  <property name="day.now" value="${ datetime::get-day( date.now )}"/>
  <property name="day.now" value="0${ day.now }" if="${ int::parse( day.now ) &lt; 10 }"/>
  <property name="hour.now" value="${ datetime::get-hour( date.now )}"/>
  <property name="hour.now" value="0${ hour.now }" if="${ int::parse( hour.now ) &lt; 10 }"/>
  <property name="minute.now" value="${ datetime::get-minute( date.now )}"/>
  <property name="minute.now" value="0${ minute.now }" if="${ int::parse( minute.now ) &lt; 10 }"/>

  <script language="C#">
    <code>
      <![CDATA[
        [TaskName("createsolutioninfo")]
        public class CreateSolutionInfoTask: Task
        {
          [TaskAttribute("product", Required=true)]
          public string Product { get { return _product; } set { _product=value; } }
          private string _product;
          
          [TaskAttribute("version", Required=true)]
          public string Version { get { return _version; } set { _version=value; } }
          private string _version;
          
          [TaskAttribute("solutionInfoFile", Required=true)]
          public string SolutionInfoFile { get { return _solutionInfoFile; } set { _solutionInfoFile=value; } }
          private string _solutionInfoFile;
          
          protected override void ExecuteTask()
          {
            string solutionInfo;
            using (StreamReader reader = new StreamReader(SolutionInfoFile))
            {
                solutionInfo = reader.ReadToEnd();
            }
            
            Regex productRegex = new Regex(@"\[assembly\:\sAssemblyProduct\("".+""\)\]");
            Regex assemblyVersionRegex = new Regex(@"\[assembly\:\sAssemblyVersion\("".+""\)\]");
            Regex assemblyFileVersionRegex = new Regex(@"\[assembly\:\sAssemblyFileVersion\("".+""\)\]");
            
            solutionInfo = productRegex.Replace(solutionInfo,@"[assembly: AssemblyProduct(""" + Product + @""")]");
            solutionInfo = assemblyVersionRegex.Replace(solutionInfo,@"[assembly: AssemblyVersion(""" + Version + @""")]");
            solutionInfo = assemblyFileVersionRegex.Replace(solutionInfo,@"[assembly: AssemblyFileVersion(""" + Version + @""")]");
            
            using (StreamWriter writer = new StreamWriter(SolutionInfoFile))
            {
                writer.Write(solutionInfo);
            }
          }
        }
      ]]>
    </code>
  </script>

  <script language="C#">
    <code>
      <![CDATA[
        [TaskName("mgdfversion")]
        public class MGDFVersionTask: Task
        {
          [TaskAttribute("version", Required=true)]
          public string Version { get { return _version; } set { _version=value; } }
          private string _version;
          
          [TaskAttribute("versionFile", Required=true)]
          public string VersionFile { get { return _versionFile; } set { _versionFile=value; } }
          private string _versionFile;
          
          protected override void ExecuteTask()
          {
            string versionFile;
            using (StreamReader reader = new StreamReader(VersionFile))
            {
                versionFile = reader.ReadToEnd();
            }
            
            //const std::string MGDF_VERSION = "1.0.0.0";
            Regex versionRegex = new Regex(@"const\sstd\:\:string\sMGDFVersionInfo\:\:MGDF_VERSION\s=\s"".+"";");
            
            versionFile = versionRegex.Replace(versionFile,@"const std::string MGDFVersionInfo::MGDF_VERSION = """+ Version +@""";");
            
            using (StreamWriter writer = new StreamWriter(VersionFile))
            {
                writer.Write(versionFile);
            }
          }
        }
      ]]>
    </code>
  </script>

  
  <script language="C#">
    <imports>
      <import namespace="System.Security.Cryptography" />
    </imports>
    <code>
      <![CDATA[
        [TaskName("generateupdatescript")]
        public class GenerateUpdateScript: Task
        {
          [TaskAttribute("version", Required=true)]
          public string Version { get { return _version; } set { _version=value; } }
          private string _version;
          
          [TaskAttribute("file", Required=true)]
          public string File { get { return _file; } set { _file=value; } }
          private string _file; 
                    
          [TaskAttribute("url", Required=true)]
          public string Url { get { return _url; } set { _url=value; } }
          private string _url;
          
          [TaskAttribute("output", Required=true)]
          public string Output { get { return _output; } set { _output=value; } }
          private string _output;
          
          protected override void ExecuteTask()
          {
            using (Stream fileStream = new FileStream(_output, FileMode.Create, FileAccess.Write, FileShare.Write))
            {
                using (StreamWriter writer = new StreamWriter(fileStream))
                {
                    using (Stream stream = new FileStream(_file, FileMode.Open, FileAccess.Read, FileShare.Read))
                    {
                        using (HashAlgorithm hashAlg = MD5.Create())
                        {
                            byte[] hash = hashAlg.ComputeHash(stream);
                            StringBuilder result = new StringBuilder();
                            foreach (byte b in hash)
                            {
                                result.Append(b.ToString("x2"));
                            }

                            string md5 = result.ToString();

                            writer.WriteLine("{");
                            writer.WriteLine(@"""Version"":""" + _version + @""",");
                            writer.WriteLine(@"""Url"":""" + _url + @""",");
                            writer.WriteLine(@"""MD5"":""" + md5 + @"""");
                            writer.WriteLine("}");
                        }
                    }
                }
            }
          }
        }
      ]]>
    </code>
  </script>
</project>
