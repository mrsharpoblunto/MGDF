#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4959
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MGDF.GamesManager.GameSource.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="GameSource")]
	public partial class GameSourceRepository : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGameFragment(GameFragment instance);
    partial void UpdateGameFragment(GameFragment instance);
    partial void DeleteGameFragment(GameFragment instance);
    partial void InsertDeveloper(Developer instance);
    partial void UpdateDeveloper(Developer instance);
    partial void DeleteDeveloper(Developer instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertUserGame(UserGame instance);
    partial void UpdateUserGame(UserGame instance);
    partial void DeleteUserGame(UserGame instance);
    partial void InsertGameVersion(GameVersion instance);
    partial void UpdateGameVersion(GameVersion instance);
    partial void DeleteGameVersion(GameVersion instance);
    partial void InsertDefaultFileServerGameData(DefaultFileServerGameData instance);
    partial void UpdateDefaultFileServerGameData(DefaultFileServerGameData instance);
    partial void DeleteDefaultFileServerGameData(DefaultFileServerGameData instance);
    partial void InsertAmazonS3FileServerGameData(AmazonS3FileServerGameData instance);
    partial void UpdateAmazonS3FileServerGameData(AmazonS3FileServerGameData instance);
    partial void DeleteAmazonS3FileServerGameData(AmazonS3FileServerGameData instance);
    partial void InsertAmazonS3UploadPart(AmazonS3UploadPart instance);
    partial void UpdateAmazonS3UploadPart(AmazonS3UploadPart instance);
    partial void DeleteAmazonS3UploadPart(AmazonS3UploadPart instance);
    partial void InsertCNonce(CNonce instance);
    partial void UpdateCNonce(CNonce instance);
    partial void DeleteCNonce(CNonce instance);
    partial void InsertPendingDelete(PendingDelete instance);
    partial void UpdatePendingDelete(PendingDelete instance);
    partial void DeletePendingDelete(PendingDelete instance);
    #endregion
		
		public GameSourceRepository() : 
				base("Data Source=(local);Persist Security Info=True;User ID=dev", mappingSource)
		{
			OnCreated();
		}
		
		public GameSourceRepository(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameSourceRepository(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameSourceRepository(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameSourceRepository(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GameFragment> GameFragments
		{
			get
			{
				return this.GetTable<GameFragment>();
			}
		}
		
		public System.Data.Linq.Table<Developer> Developers
		{
			get
			{
				return this.GetTable<Developer>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<UserGame> UserGames
		{
			get
			{
				return this.GetTable<UserGame>();
			}
		}
		
		public System.Data.Linq.Table<GameVersion> GameVersions
		{
			get
			{
				return this.GetTable<GameVersion>();
			}
		}
		
		public System.Data.Linq.Table<DefaultFileServerGameData> DefaultFileServerGameDatas
		{
			get
			{
				return this.GetTable<DefaultFileServerGameData>();
			}
		}
		
		public System.Data.Linq.Table<AmazonS3FileServerGameData> AmazonS3FileServerGameDatas
		{
			get
			{
				return this.GetTable<AmazonS3FileServerGameData>();
			}
		}
		
		public System.Data.Linq.Table<AmazonS3UploadPart> AmazonS3UploadParts
		{
			get
			{
				return this.GetTable<AmazonS3UploadPart>();
			}
		}
		
		public System.Data.Linq.Table<CNonce> CNonces
		{
			get
			{
				return this.GetTable<CNonce>();
			}
		}
		
		public System.Data.Linq.Table<PendingDelete> PendingDeletes
		{
			get
			{
				return this.GetTable<PendingDelete>();
			}
		}
	}
	
	[Table(Name="dbo.mgdf_gamefragments")]
	public partial class GameFragment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _GameFragmentFile;
		
		private System.Guid _DeveloperId;
		
		private string _SHA1Hash;
		
		private System.Guid _GameVersionId;
		
		private bool _PublishOnComplete;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<GameVersion> _GameVersion;
		
		private EntityRef<Developer> _Developer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnGameDataIdChanging(string value);
    partial void OnGameDataIdChanged();
    partial void OnDeveloperIdChanging(System.Guid value);
    partial void OnDeveloperIdChanged();
    partial void OnMd5HashChanging(string value);
    partial void OnMd5HashChanged();
    partial void OnGameVersionIdChanging(System.Guid value);
    partial void OnGameVersionIdChanged();
    partial void OnPublishOnCompleteChanging(bool value);
    partial void OnPublishOnCompleteChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public GameFragment()
		{
			this._GameVersion = default(EntityRef<GameVersion>);
			this._Developer = default(EntityRef<Developer>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_GameFragmentFile", DbType="VarChar(255)")]
		public string GameDataId
		{
			get
			{
				return this._GameFragmentFile;
			}
			set
			{
				if ((this._GameFragmentFile != value))
				{
					this.OnGameDataIdChanging(value);
					this.SendPropertyChanging();
					this._GameFragmentFile = value;
					this.SendPropertyChanged("GameDataId");
					this.OnGameDataIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeveloperId", DbType="UniqueIdentifier")]
		public System.Guid DeveloperId
		{
			get
			{
				return this._DeveloperId;
			}
			set
			{
				if ((this._DeveloperId != value))
				{
					if (this._Developer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeveloperIdChanging(value);
					this.SendPropertyChanging();
					this._DeveloperId = value;
					this.SendPropertyChanged("DeveloperId");
					this.OnDeveloperIdChanged();
				}
			}
		}
		
		[Column(Storage="_SHA1Hash")]
		public string Md5Hash
		{
			get
			{
				return this._SHA1Hash;
			}
			set
			{
				if ((this._SHA1Hash != value))
				{
					this.OnMd5HashChanging(value);
					this.SendPropertyChanging();
					this._SHA1Hash = value;
					this.SendPropertyChanged("Md5Hash");
					this.OnMd5HashChanged();
				}
			}
		}
		
		[Column(Storage="_GameVersionId")]
		public System.Guid GameVersionId
		{
			get
			{
				return this._GameVersionId;
			}
			set
			{
				if ((this._GameVersionId != value))
				{
					this.OnGameVersionIdChanging(value);
					this.SendPropertyChanging();
					this._GameVersionId = value;
					this.SendPropertyChanged("GameVersionId");
					this.OnGameVersionIdChanged();
				}
			}
		}
		
		[Column(Storage="_PublishOnComplete", DbType="Bit NOT NULL")]
		public bool PublishOnComplete
		{
			get
			{
				return this._PublishOnComplete;
			}
			set
			{
				if ((this._PublishOnComplete != value))
				{
					this.OnPublishOnCompleteChanging(value);
					this.SendPropertyChanging();
					this._PublishOnComplete = value;
					this.SendPropertyChanged("PublishOnComplete");
					this.OnPublishOnCompleteChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Association(Name="GameFragment_GameVersion", Storage="_GameVersion", ThisKey="GameVersionId", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public GameVersion GameVersion
		{
			get
			{
				return this._GameVersion.Entity;
			}
			set
			{
				GameVersion previousValue = this._GameVersion.Entity;
				if (((previousValue != value) 
							|| (this._GameVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameVersion.Entity = null;
						previousValue.GameFragment = null;
					}
					this._GameVersion.Entity = value;
					if ((value != null))
					{
						value.GameFragment = this;
					}
					this.SendPropertyChanged("GameVersion");
				}
			}
		}
		
		[Association(Name="Developer_GameFragment", Storage="_Developer", ThisKey="DeveloperId", OtherKey="Id", IsForeignKey=true)]
		public Developer Developer
		{
			get
			{
				return this._Developer.Entity;
			}
			set
			{
				Developer previousValue = this._Developer.Entity;
				if (((previousValue != value) 
							|| (this._Developer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Developer.Entity = null;
						previousValue.GameFragments.Remove(this);
					}
					this._Developer.Entity = value;
					if ((value != null))
					{
						value.GameFragments.Add(this);
						this._DeveloperId = value.Id;
					}
					else
					{
						this._DeveloperId = default(System.Guid);
					}
					this.SendPropertyChanged("Developer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.mgdf_developers")]
	public partial class Developer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Homepage;
		
		private string _PublicKey;
		
		private string _PrivateKey;
		
		private string _Uid;
		
		private string _Custom;
		
		private EntitySet<GameFragment> _GameFragments;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHomepageChanging(string value);
    partial void OnHomepageChanged();
    partial void OnDeveloperKeyChanging(string value);
    partial void OnDeveloperKeyChanged();
    partial void OnSecretKeyChanging(string value);
    partial void OnSecretKeyChanged();
    partial void OnUidChanging(string value);
    partial void OnUidChanged();
    partial void OnCustomChanging(string value);
    partial void OnCustomChanged();
    #endregion
		
		public Developer()
		{
			this._GameFragments = new EntitySet<GameFragment>(new Action<GameFragment>(this.attach_GameFragments), new Action<GameFragment>(this.detach_GameFragments));
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Homepage", DbType="VarChar(255)")]
		public string Homepage
		{
			get
			{
				return this._Homepage;
			}
			set
			{
				if ((this._Homepage != value))
				{
					this.OnHomepageChanging(value);
					this.SendPropertyChanging();
					this._Homepage = value;
					this.SendPropertyChanged("Homepage");
					this.OnHomepageChanged();
				}
			}
		}
		
		[Column(Storage="_PublicKey", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string DeveloperKey
		{
			get
			{
				return this._PublicKey;
			}
			set
			{
				if ((this._PublicKey != value))
				{
					this.OnDeveloperKeyChanging(value);
					this.SendPropertyChanging();
					this._PublicKey = value;
					this.SendPropertyChanged("DeveloperKey");
					this.OnDeveloperKeyChanged();
				}
			}
		}
		
		[Column(Storage="_PrivateKey", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string SecretKey
		{
			get
			{
				return this._PrivateKey;
			}
			set
			{
				if ((this._PrivateKey != value))
				{
					this.OnSecretKeyChanging(value);
					this.SendPropertyChanging();
					this._PrivateKey = value;
					this.SendPropertyChanged("SecretKey");
					this.OnSecretKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Uid", CanBeNull=false)]
		public string Uid
		{
			get
			{
				return this._Uid;
			}
			set
			{
				if ((this._Uid != value))
				{
					this.OnUidChanging(value);
					this.SendPropertyChanging();
					this._Uid = value;
					this.SendPropertyChanged("Uid");
					this.OnUidChanged();
				}
			}
		}
		
		[Column(Storage="_Custom", CanBeNull=false)]
		public string Custom
		{
			get
			{
				return this._Custom;
			}
			set
			{
				if ((this._Custom != value))
				{
					this.OnCustomChanging(value);
					this.SendPropertyChanging();
					this._Custom = value;
					this.SendPropertyChanged("Custom");
					this.OnCustomChanged();
				}
			}
		}
		
		[Association(Name="Developer_GameFragment", Storage="_GameFragments", ThisKey="Id", OtherKey="DeveloperId")]
		public EntitySet<GameFragment> GameFragments
		{
			get
			{
				return this._GameFragments;
			}
			set
			{
				this._GameFragments.Assign(value);
			}
		}
		
		[Association(Name="Developer_Game", Storage="_Games", ThisKey="Id", OtherKey="DeveloperId")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameFragments(GameFragment entity)
		{
			this.SendPropertyChanging();
			entity.Developer = this;
		}
		
		private void detach_GameFragments(GameFragment entity)
		{
			this.SendPropertyChanging();
			entity.Developer = null;
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Developer = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Developer = null;
		}
	}
	
	[Table(Name="dbo.mgdf_users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _PasswordHash;
		
		private string _Custom;
		
		private EntityRef<UserGame> _UserGames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnCustomChanging(string value);
    partial void OnCustomChanged();
    #endregion
		
		public User()
		{
			this._UserGames = default(EntityRef<UserGame>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordHash", DbType="VarChar(255)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[Column(Storage="_Custom", CanBeNull=false)]
		public string Custom
		{
			get
			{
				return this._Custom;
			}
			set
			{
				if ((this._Custom != value))
				{
					this.OnCustomChanging(value);
					this.SendPropertyChanging();
					this._Custom = value;
					this.SendPropertyChanged("Custom");
					this.OnCustomChanged();
				}
			}
		}
		
		[Association(Name="User_UserGame", Storage="_UserGames", ThisKey="Id", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public UserGame UserGames
		{
			get
			{
				return this._UserGames.Entity;
			}
			set
			{
				UserGame previousValue = this._UserGames.Entity;
				if (((previousValue != value) 
							|| (this._UserGames.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGames.Entity = null;
						previousValue.User = null;
					}
					this._UserGames.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("UserGames");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.mgdf_games")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Description;
		
		private string _Uid;
		
		private string _Homepage;
		
		private System.Guid _DeveloperId;
		
		private int _InterfaceVersion;
		
		private bool _RequiresAuthentication;
		
		private EntityRef<UserGame> _UserGames;
		
		private EntitySet<GameVersion> _GameVersions;
		
		private EntityRef<Developer> _Developer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUidChanging(string value);
    partial void OnUidChanged();
    partial void OnHomepageChanging(string value);
    partial void OnHomepageChanged();
    partial void OnDeveloperIdChanging(System.Guid value);
    partial void OnDeveloperIdChanged();
    partial void OnInterfaceVersionChanging(int value);
    partial void OnInterfaceVersionChanged();
    partial void OnRequiresAuthenticationChanging(bool value);
    partial void OnRequiresAuthenticationChanged();
    #endregion
		
		public Game()
		{
			this._UserGames = default(EntityRef<UserGame>);
			this._GameVersions = new EntitySet<GameVersion>(new Action<GameVersion>(this.attach_GameVersions), new Action<GameVersion>(this.detach_GameVersions));
			this._Developer = default(EntityRef<Developer>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Uid", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Uid
		{
			get
			{
				return this._Uid;
			}
			set
			{
				if ((this._Uid != value))
				{
					this.OnUidChanging(value);
					this.SendPropertyChanging();
					this._Uid = value;
					this.SendPropertyChanged("Uid");
					this.OnUidChanged();
				}
			}
		}
		
		[Column(Storage="_Homepage", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Homepage
		{
			get
			{
				return this._Homepage;
			}
			set
			{
				if ((this._Homepage != value))
				{
					this.OnHomepageChanging(value);
					this.SendPropertyChanging();
					this._Homepage = value;
					this.SendPropertyChanged("Homepage");
					this.OnHomepageChanged();
				}
			}
		}
		
		[Column(Storage="_DeveloperId", DbType="UniqueIdentifier")]
		public System.Guid DeveloperId
		{
			get
			{
				return this._DeveloperId;
			}
			set
			{
				if ((this._DeveloperId != value))
				{
					if (this._Developer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeveloperIdChanging(value);
					this.SendPropertyChanging();
					this._DeveloperId = value;
					this.SendPropertyChanged("DeveloperId");
					this.OnDeveloperIdChanged();
				}
			}
		}
		
		[Column(Storage="_InterfaceVersion", DbType="Int")]
		public int InterfaceVersion
		{
			get
			{
				return this._InterfaceVersion;
			}
			set
			{
				if ((this._InterfaceVersion != value))
				{
					this.OnInterfaceVersionChanging(value);
					this.SendPropertyChanging();
					this._InterfaceVersion = value;
					this.SendPropertyChanged("InterfaceVersion");
					this.OnInterfaceVersionChanged();
				}
			}
		}
		
		[Column(Storage="_RequiresAuthentication", DbType="Bit NOT NULL")]
		public bool RequiresAuthentication
		{
			get
			{
				return this._RequiresAuthentication;
			}
			set
			{
				if ((this._RequiresAuthentication != value))
				{
					this.OnRequiresAuthenticationChanging(value);
					this.SendPropertyChanging();
					this._RequiresAuthentication = value;
					this.SendPropertyChanged("RequiresAuthentication");
					this.OnRequiresAuthenticationChanged();
				}
			}
		}
		
		[Association(Name="Game_UserGame", Storage="_UserGames", ThisKey="Id", OtherKey="GameId", IsUnique=true, IsForeignKey=false)]
		public UserGame UserGames
		{
			get
			{
				return this._UserGames.Entity;
			}
			set
			{
				UserGame previousValue = this._UserGames.Entity;
				if (((previousValue != value) 
							|| (this._UserGames.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGames.Entity = null;
						previousValue.Game = null;
					}
					this._UserGames.Entity = value;
					if ((value != null))
					{
						value.Game = this;
					}
					this.SendPropertyChanged("UserGames");
				}
			}
		}
		
		[Association(Name="Game_GameVersion", Storage="_GameVersions", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<GameVersion> GameVersions
		{
			get
			{
				return this._GameVersions;
			}
			set
			{
				this._GameVersions.Assign(value);
			}
		}
		
		[Association(Name="Developer_Game", Storage="_Developer", ThisKey="DeveloperId", OtherKey="Id", IsForeignKey=true)]
		public Developer Developer
		{
			get
			{
				return this._Developer.Entity;
			}
			set
			{
				Developer previousValue = this._Developer.Entity;
				if (((previousValue != value) 
							|| (this._Developer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Developer.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Developer.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._DeveloperId = value.Id;
					}
					else
					{
						this._DeveloperId = default(System.Guid);
					}
					this.SendPropertyChanged("Developer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameVersions(GameVersion entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_GameVersions(GameVersion entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[Table(Name="dbo.mgdf_usergames")]
	public partial class UserGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GameId;
		
		private System.Guid _UserId;
		
		private System.Guid _Id;
		
		private EntityRef<User> _User;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIdChanging(System.Guid value);
    partial void OnGameIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    #endregion
		
		public UserGame()
		{
			this._User = default(EntityRef<User>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[Column(Storage="_GameId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Id", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Association(Name="User_UserGame", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserGames = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserGames = this;
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Game_UserGame", Storage="_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.UserGames = null;
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.UserGames = this;
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(System.Guid);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.mgdf_gameversions")]
	public partial class GameVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Version;
		
		private bool _IsUpdate;
		
		private string _UpdateMinVersion;
		
		private string _UpdateMaxVersion;
		
		private string _GameFile;
		
		private System.DateTime _CreatedDate;
		
		private string _UpdateDescription;
		
		private string _SHA1Hash;
		
		private System.Guid _GameId;
		
		private System.Guid _Id;
		
		private bool _Published;
		
		private string _Uid;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<GameFragment> _GameFragment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnIsUpdateChanging(bool value);
    partial void OnIsUpdateChanged();
    partial void OnUpdateMinVersionChanging(string value);
    partial void OnUpdateMinVersionChanged();
    partial void OnUpdateMaxVersionChanging(string value);
    partial void OnUpdateMaxVersionChanged();
    partial void OnGameDataIdChanging(string value);
    partial void OnGameDataIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMd5HashChanging(string value);
    partial void OnMd5HashChanged();
    partial void OnGameIdChanging(System.Guid value);
    partial void OnGameIdChanged();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnPublishedChanging(bool value);
    partial void OnPublishedChanged();
    partial void OnUidChanging(string value);
    partial void OnUidChanged();
    #endregion
		
		public GameVersion()
		{
			this._Game = default(EntityRef<Game>);
			this._GameFragment = default(EntityRef<GameFragment>);
			OnCreated();
		}
		
		[Column(Storage="_Version", DbType="varchar(255) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_IsUpdate", DbType="Bit NOT NULL")]
		public bool IsUpdate
		{
			get
			{
				return this._IsUpdate;
			}
			set
			{
				if ((this._IsUpdate != value))
				{
					this.OnIsUpdateChanging(value);
					this.SendPropertyChanging();
					this._IsUpdate = value;
					this.SendPropertyChanged("IsUpdate");
					this.OnIsUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateMinVersion", DbType="varchar(255) NOT NULL")]
		public string UpdateMinVersion
		{
			get
			{
				return this._UpdateMinVersion;
			}
			set
			{
				if ((this._UpdateMinVersion != value))
				{
					this.OnUpdateMinVersionChanging(value);
					this.SendPropertyChanging();
					this._UpdateMinVersion = value;
					this.SendPropertyChanged("UpdateMinVersion");
					this.OnUpdateMinVersionChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateMaxVersion", DbType="varchar(255) NOT NULL")]
		public string UpdateMaxVersion
		{
			get
			{
				return this._UpdateMaxVersion;
			}
			set
			{
				if ((this._UpdateMaxVersion != value))
				{
					this.OnUpdateMaxVersionChanging(value);
					this.SendPropertyChanging();
					this._UpdateMaxVersion = value;
					this.SendPropertyChanged("UpdateMaxVersion");
					this.OnUpdateMaxVersionChanged();
				}
			}
		}
		
		[Column(Storage="_GameFile", DbType="VarChar(255)")]
		public string GameDataId
		{
			get
			{
				return this._GameFile;
			}
			set
			{
				if ((this._GameFile != value))
				{
					this.OnGameDataIdChanging(value);
					this.SendPropertyChanging();
					this._GameFile = value;
					this.SendPropertyChanged("GameDataId");
					this.OnGameDataIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDescription")]
		public string Description
		{
			get
			{
				return this._UpdateDescription;
			}
			set
			{
				if ((this._UpdateDescription != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._UpdateDescription = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_SHA1Hash")]
		public string Md5Hash
		{
			get
			{
				return this._SHA1Hash;
			}
			set
			{
				if ((this._SHA1Hash != value))
				{
					this.OnMd5HashChanging(value);
					this.SendPropertyChanging();
					this._SHA1Hash = value;
					this.SendPropertyChanged("Md5Hash");
					this.OnMd5HashChanged();
				}
			}
		}
		
		[Column(Storage="_GameId")]
		public System.Guid GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[Column(Storage="_Id", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._GameFragment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Published")]
		public bool Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		[Column(Storage="_Uid", CanBeNull=false)]
		public string Uid
		{
			get
			{
				return this._Uid;
			}
			set
			{
				if ((this._Uid != value))
				{
					this.OnUidChanging(value);
					this.SendPropertyChanging();
					this._Uid = value;
					this.SendPropertyChanged("Uid");
					this.OnUidChanged();
				}
			}
		}
		
		[Association(Name="Game_GameVersion", Storage="_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.GameVersions.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.GameVersions.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(System.Guid);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[Association(Name="GameFragment_GameVersion", Storage="_GameFragment", ThisKey="Id", OtherKey="GameVersionId", IsForeignKey=true)]
		public GameFragment GameFragment
		{
			get
			{
				return this._GameFragment.Entity;
			}
			set
			{
				GameFragment previousValue = this._GameFragment.Entity;
				if (((previousValue != value) 
							|| (this._GameFragment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameFragment.Entity = null;
						previousValue.GameVersion = null;
					}
					this._GameFragment.Entity = value;
					if ((value != null))
					{
						value.GameVersion = this;
						this._Id = value.GameVersionId;
					}
					else
					{
						this._Id = default(System.Guid);
					}
					this.SendPropertyChanged("GameFragment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.mgdf_defaultfileservergamedata")]
	public partial class DefaultFileServerGameData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GameFragmentFile;
		
		private System.Guid _Id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameFileChanging(string value);
    partial void OnGameFileChanged();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    #endregion
		
		public DefaultFileServerGameData()
		{
			OnCreated();
		}
		
		[Column(Storage="_GameFragmentFile", DbType="VarChar(255)")]
		public string GameFile
		{
			get
			{
				return this._GameFragmentFile;
			}
			set
			{
				if ((this._GameFragmentFile != value))
				{
					this.OnGameFileChanging(value);
					this.SendPropertyChanging();
					this._GameFragmentFile = value;
					this.SendPropertyChanged("GameFile");
					this.OnGameFileChanged();
				}
			}
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.mgdf_amazons3fileservergamedata")]
	public partial class AmazonS3FileServerGameData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _UploadID;
		
		private string _Key;
		
		private int _NextPartIndex;
		
		private EntitySet<AmazonS3UploadPart> _AmazonS3UploadParts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUploadIDChanging(string value);
    partial void OnUploadIDChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnNextPartIndexChanging(int value);
    partial void OnNextPartIndexChanged();
    #endregion
		
		public AmazonS3FileServerGameData()
		{
			this._AmazonS3UploadParts = new EntitySet<AmazonS3UploadPart>(new Action<AmazonS3UploadPart>(this.attach_AmazonS3UploadParts), new Action<AmazonS3UploadPart>(this.detach_AmazonS3UploadParts));
			OnCreated();
		}
		
		[Column(Storage="_Id", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UploadID", CanBeNull=false)]
		public string UploadID
		{
			get
			{
				return this._UploadID;
			}
			set
			{
				if ((this._UploadID != value))
				{
					this.OnUploadIDChanging(value);
					this.SendPropertyChanging();
					this._UploadID = value;
					this.SendPropertyChanged("UploadID");
					this.OnUploadIDChanged();
				}
			}
		}
		
		[Column(Storage="_Key", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[Column(Storage="_NextPartIndex")]
		public int NextPartIndex
		{
			get
			{
				return this._NextPartIndex;
			}
			set
			{
				if ((this._NextPartIndex != value))
				{
					this.OnNextPartIndexChanging(value);
					this.SendPropertyChanging();
					this._NextPartIndex = value;
					this.SendPropertyChanged("NextPartIndex");
					this.OnNextPartIndexChanged();
				}
			}
		}
		
		[Association(Name="AmazonS3FileServerGameData_AmazonS3UploadPart", Storage="_AmazonS3UploadParts", ThisKey="Id", OtherKey="GameDataId")]
		public EntitySet<AmazonS3UploadPart> AmazonS3UploadParts
		{
			get
			{
				return this._AmazonS3UploadParts;
			}
			set
			{
				this._AmazonS3UploadParts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AmazonS3UploadParts(AmazonS3UploadPart entity)
		{
			this.SendPropertyChanging();
			entity.AmazonS3FileServerGameData = this;
		}
		
		private void detach_AmazonS3UploadParts(AmazonS3UploadPart entity)
		{
			this.SendPropertyChanging();
			entity.AmazonS3FileServerGameData = null;
		}
	}
	
	[Table(Name="dbo.mgdf_amazons3uploadpart")]
	public partial class AmazonS3UploadPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GameDataId;
		
		private string _ETag;
		
		private int _PartIndex;
		
		private System.Guid _Id;
		
		private EntityRef<AmazonS3FileServerGameData> _AmazonS3FileServerGameData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameDataIdChanging(System.Guid value);
    partial void OnGameDataIdChanged();
    partial void OnETagChanging(string value);
    partial void OnETagChanged();
    partial void OnPartIndexChanging(int value);
    partial void OnPartIndexChanged();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    #endregion
		
		public AmazonS3UploadPart()
		{
			this._AmazonS3FileServerGameData = default(EntityRef<AmazonS3FileServerGameData>);
			OnCreated();
		}
		
		[Column(Storage="_GameDataId")]
		public System.Guid GameDataId
		{
			get
			{
				return this._GameDataId;
			}
			set
			{
				if ((this._GameDataId != value))
				{
					if (this._AmazonS3FileServerGameData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameDataIdChanging(value);
					this.SendPropertyChanging();
					this._GameDataId = value;
					this.SendPropertyChanged("GameDataId");
					this.OnGameDataIdChanged();
				}
			}
		}
		
		[Column(Storage="_ETag", CanBeNull=false)]
		public string ETag
		{
			get
			{
				return this._ETag;
			}
			set
			{
				if ((this._ETag != value))
				{
					this.OnETagChanging(value);
					this.SendPropertyChanging();
					this._ETag = value;
					this.SendPropertyChanged("ETag");
					this.OnETagChanged();
				}
			}
		}
		
		[Column(Storage="_PartIndex")]
		public int PartIndex
		{
			get
			{
				return this._PartIndex;
			}
			set
			{
				if ((this._PartIndex != value))
				{
					this.OnPartIndexChanging(value);
					this.SendPropertyChanging();
					this._PartIndex = value;
					this.SendPropertyChanged("PartIndex");
					this.OnPartIndexChanged();
				}
			}
		}
		
		[Column(Storage="_Id", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Association(Name="AmazonS3FileServerGameData_AmazonS3UploadPart", Storage="_AmazonS3FileServerGameData", ThisKey="GameDataId", OtherKey="Id", IsForeignKey=true)]
		public AmazonS3FileServerGameData AmazonS3FileServerGameData
		{
			get
			{
				return this._AmazonS3FileServerGameData.Entity;
			}
			set
			{
				AmazonS3FileServerGameData previousValue = this._AmazonS3FileServerGameData.Entity;
				if (((previousValue != value) 
							|| (this._AmazonS3FileServerGameData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AmazonS3FileServerGameData.Entity = null;
						previousValue.AmazonS3UploadParts.Remove(this);
					}
					this._AmazonS3FileServerGameData.Entity = value;
					if ((value != null))
					{
						value.AmazonS3UploadParts.Add(this);
						this._GameDataId = value.Id;
					}
					else
					{
						this._GameDataId = default(System.Guid);
					}
					this.SendPropertyChanged("AmazonS3FileServerGameData");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.mgdf_cnonce")]
	public partial class CNonce : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _Expires;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnExpiresChanging(System.DateTime value);
    partial void OnExpiresChanged();
    #endregion
		
		public CNonce()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Expires")]
		public System.DateTime Expires
		{
			get
			{
				return this._Expires;
			}
			set
			{
				if ((this._Expires != value))
				{
					this.OnExpiresChanging(value);
					this.SendPropertyChanging();
					this._Expires = value;
					this.SendPropertyChanged("Expires");
					this.OnExpiresChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.mgdf_pendingdelete")]
	public partial class PendingDelete : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FileName;
		
		private System.Guid _Id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameDataIdChanging(string value);
    partial void OnGameDataIdChanged();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    #endregion
		
		public PendingDelete()
		{
			OnCreated();
		}
		
		[Column(Name="FileName", Storage="_FileName", DbType="varchar(255)", CanBeNull=false)]
		public string GameDataId
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnGameDataIdChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("GameDataId");
					this.OnGameDataIdChanged();
				}
			}
		}
		
		[Column(Storage="_Id", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
